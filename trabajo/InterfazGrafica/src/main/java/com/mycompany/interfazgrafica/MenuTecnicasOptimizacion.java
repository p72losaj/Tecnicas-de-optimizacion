/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.interfazgrafica;

import javax.swing.JFrame;

/**
 *
 * @author jaime
 */
public class MenuTecnicasOptimizacion extends javax.swing.JFrame {

    public int C = 0; // Numero de conjuntos o sets
    public int W = 0; // Numero de palabras por bloque
    
    /**
     * Creates new form MenuTecnicasOptimizacion
     */
    public MenuTecnicasOptimizacion(int C, int W) {
        initComponents();
        this.C = C;
        this.W = W;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titulojLabel = new javax.swing.JLabel();
        VolverjButton = new javax.swing.JButton();
        NoOptimizacionjButton = new javax.swing.JButton();
        PaddingjButton = new javax.swing.JButton();
        PermutacionjButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        titulojLabel.setText("MENU DE TECNICAS DE OPTIMIZACION");

        VolverjButton.setText("Cambiar memoria");
        VolverjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VolverjButtonActionPerformed(evt);
            }
        });

        NoOptimizacionjButton.setText("No aplicar una tecnica de optimizacion");
        NoOptimizacionjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NoOptimizacionjButtonActionPerformed(evt);
            }
        });

        PaddingjButton.setText("Aplicar padding");

        PermutacionjButton.setText("Aplicar permutacion");
        PermutacionjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PermutacionjButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(38, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(titulojLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(NoOptimizacionjButton, javax.swing.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)
                    .addComponent(PaddingjButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PermutacionjButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(VolverjButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(28, 28, 28))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titulojLabel)
                .addGap(33, 33, 33)
                .addComponent(NoOptimizacionjButton)
                .addGap(18, 18, 18)
                .addComponent(PermutacionjButton)
                .addGap(30, 30, 30)
                .addComponent(PaddingjButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 79, Short.MAX_VALUE)
                .addComponent(VolverjButton)
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void VolverjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VolverjButtonActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        JFrame ventana = new ObtencionDatosMemoriaCache();
        ventana.setVisible(true);
        
    }//GEN-LAST:event_VolverjButtonActionPerformed

    private void PermutacionjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PermutacionjButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PermutacionjButtonActionPerformed

    private void NoOptimizacionjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NoOptimizacionjButtonActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        long tiempo = (long) calcularTiempoComputo1();
        JFrame ventana = new TiemposComputo(C, W,tiempo);
        ventana.setVisible(true);
    }//GEN-LAST:event_NoOptimizacionjButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MenuTecnicasOptimizacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MenuTecnicasOptimizacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MenuTecnicasOptimizacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MenuTecnicasOptimizacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            private int C,W;
            public void run() {
                new MenuTecnicasOptimizacion(this.C, this.W).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton NoOptimizacionjButton;
    private javax.swing.JButton PaddingjButton;
    private javax.swing.JButton PermutacionjButton;
    private javax.swing.JButton VolverjButton;
    private javax.swing.JLabel titulojLabel;
    // End of variables declaration//GEN-END:variables

    /**
     * Funcion que calcula el tiempo de computo del algoritmo sin aplicar 
     * tecnicas de optimizacion
     * @return Tiempo de computo
     */
    private float calcularTiempoComputo1() {
        // Declaramos las matrices
        int A[][] = new int[2048][2048];
        int B[][] = new int[2048][2048];
        int C[][] = new int[2048][2048];
        // Rellenamos las matrices
        for(int i = 0; i < 2048; i++){
            for(int j=0; j < 2048; j++){
                A[i][j] = (int) (Math.random()*9+1);
                B[i][j] = (int) (Math.random()*9+1);
            }
        }
        long startTime = System.nanoTime();
        // Algoritmo
        for(int i=0; i < 2048; i++){
            for(int j=0; j<2048; j++){
                for(int k=0; k<2048; k++){
                    C[i][j] = C[i][j]+A[i][k]*B[k][j];
                }
            }
        }
        long endTime = System.nanoTime() - startTime; // tiempo en que se ejecuta su mÃ©todo
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
