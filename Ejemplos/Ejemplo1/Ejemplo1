Estructura generica de la cache

	1. C: Numero de conjuntos o sets
	2. L: Numero de bloques por conjuntoo asociatividad
	2. w: Número de palabras por bloque
	3. Politica de reemplazo LRU
##################################################################	
Descriptor de acceso lineal a memoria (LMAD)

Permite obtener la posición de memoria de una determinada referencia a un array para una iteración concreta del bucle anidado

Ref(X,I) = f_1·I_1 + … + f_k·I_k· ∏_(i=1) ^ (k-1) * Di + … + f_M·I_M·∏_(i=1)^(M-1) * Di

###################################################################

Stride del array 
	
##################################################################
Stride: Ubicación en palabras de memoria consecutivas a través de la jerarquía de memoria
	- Accesos con cualquier otro stride. Ubicación en palabras de memoria con un salto de: ∆stride = (stride / W) mod C
S: Velocidad del hardware en operaciones por segundo
F: Numero de operaciones ejecutadas por un programa.
T: Tiempo en ejecutar un programa en segundos
U: Utilizacion del sistema por un programa (U = F / S*T)
	- Optimo si U=1
Q: Reuso de operandos almacenados en memoria
	- Relacion entre el numero de veces que el operando es referenciado y el numero de veces que es cargado en un registro
Ocupacion ordenada de la cache: NewStride = (( C + 1 - (stride * mod (C*W) / W ) * W

###########################################################################################
Estudiar ocupacion memoria cache

1- Datos del ejemplo
	-> Asociatividad (Numero de vias de la cache) = 2
	-> Tamano de la cache = 265 bytes
	-> Tamano de bloque = 16 bytes
	-> Tamano de palabra = 4 bytes
	
############################################################################################

2- Calculos necesarios
	-> 256 (byte/cache) % 2 (vias/cache) = 128 (byte/cache)
	-> 128 (byte/via) % 16 (byte/bloque) = 8 (byte/via)

real=4  A(500,500), B(500,500)

Codigo: 

for(i=0;i<10;i++){
    for(j=0;j<10;j++){
        A[i][j]=A[i][j*3]+B[i][j]
    }
}

i=0,j=0 | A(0,0),B(0,0) -> D.I (A) mod (c,w) = 0 
	-> A(0,0),B(0,0) dan fallo

i=0,j=1 | A(0,1),A(0,3),B(0,1) -> D.I(B) mod(c,w) = 4

i=0,j=2 | A(0,2),A(0,6),B(0,2) -> A(0,6) da fallo

j=3 | A(0,3), A(0,9), B(0,3) -> A(0,9) da fallo

j=4 | A(0,4), A(0,12), B(0,4)

i=1,j=0 -> Salto de 500: A(0,0) -> A(0,1)

i=1,j=1 -> A[1,6],A(1,9) -> A(1,12) tenemos una interferencia cruzada

Cache:

-> Primera via ocupada por completo
-> 

            v1                                               v2
       w3        w2            w1        w0             w3  w2    w1    w0
0   A(0,3)     A(0,2)        A(0,1)      A(0,0)
1
2
3
4   B(0,3)     B(0,2)        B(0,1)      B(0,0)
5
6
7
